1. **Instalaci√≥n silenciosa de apps:** Orquestar MSI/EXE con par√°metros, logs y validaci√≥n post-instalaci√≥n.

## üîé ¬øQu√© hace el script?

1. **Recibe par√°metros**  
   - `InstallerPath`: ruta al instalador (MSI o EXE).  
   - `AppName`: nombre de la aplicaci√≥n para validar instalaci√≥n.  
   - `LogPath`: carpeta donde guardar logs (por defecto `C:\Logs`).  

2. **Crea carpeta de logs** si no existe.  
   Ejemplo: `C:\Logs\MiApp_20251017_1059.log`.

3. **Detecta el tipo de instalador**  
   - Si es `.msi` ‚Üí usa `msiexec.exe` con `/qn` (silencioso) y `/L*v` (log detallado).  
   - Si es `.exe` ‚Üí aplica par√°metros gen√©ricos `/quiet /norestart /log`. *(puedes personalizar seg√∫n el instalador: InnoSetup, NSIS, InstallShield, etc.)*  

4. **Ejecuta la instalaci√≥n** en modo silencioso y espera a que termine.  

5. **Valida la instalaci√≥n**  
   - Busca en el registro de Windows si existe un programa cuyo `DisplayName` contenga el nombre que pasaste en `$AppName`.  
   - Si lo encuentra ‚Üí ‚úÖ Instalaci√≥n correcta.  
   - Si no ‚Üí ‚ö† Instalaci√≥n ejecutada pero no detectada.  

6. **Manejo de errores**  
   - Si el instalador devuelve un c√≥digo distinto de 0 ‚Üí ‚ùå error, revisa el log.  

---

## ‚öôÔ∏è C√≥mo usarlo en tu Gestor de Scripts Universal

T√∫ ya tienes un **UI modular con iconos y ejecuci√≥n paralela**. Este script encaja como **m√≥dulo de instalaci√≥n silenciosa**. Te doy un flujo de integraci√≥n:

1. **En tu UI** (WinForms/WPF):
   - Agrega un bot√≥n o men√∫: *‚ÄúInstalar aplicaci√≥n‚Äù*.  
   - Permite al usuario seleccionar el instalador (`OpenFileDialog`).  
   - Campo de texto para el nombre de la app (`AppName`).  
   - Opci√≥n para elegir carpeta de logs.  

2. **Llamada al script**  
   Desde tu gestor, ejecuta algo as√≠:

   ```powershell
   powershell.exe -ExecutionPolicy Bypass -File ".\InstaladorSilencioso.ps1" `
       -InstallerPath "C:\Installers\MiApp.msi" `
       -AppName "MiApp" `
       -LogPath "C:\Logs"
   ```

   *(Si tu gestor ya maneja jobs en paralelo, puedes lanzar varias instalaciones a la vez con par√°metros distintos.)*

3. **Captura de salida**  
   - Muestra en tu UI el estado: *‚ÄúInstalando‚Ä¶‚Äù*, *‚ÄúValidando‚Ä¶‚Äù*, *‚ÄúCompletado‚Äù*.  
   - Incluso puedes leer el log en tiempo real y mostrarlo en un textbox.  

4. **Extensi√≥n futura**  
   - A√±adir soporte para **listas de instaladores** (ejecutar varios en secuencia o paralelo).  
   - Integrar **iconos din√°micos**: verde si instalado, rojo si fall√≥.  
   - Guardar un **historial de instalaciones** en tu gestor.  


2. **Actualizaci√≥n de software:** Verificar versiones, descargar releases y aplicar actualizaciones con rollback.

## üîé ¬øQu√© hace el script?

1. **Verifica la versi√≥n instalada**  
   - Toma la ruta del ejecutable actual (`CurrentExePath`) y lee su `ProductVersion`.  
   - Esto sirve para comparar antes y despu√©s de la actualizaci√≥n.

2. **Descarga la nueva versi√≥n**  
   - Usa la URL que le pasas (`DownloadUrl`) y guarda el instalador en una carpeta temporal (`C:\Temp` por defecto).  

3. **Genera un backup (rollback)**  
   - Copia la carpeta donde est√° el ejecutable actual a `C:\Backup`.  
   - Si la actualizaci√≥n falla, restaura desde ah√≠.

4. **Ejecuta la instalaci√≥n silenciosa**  
   - Si es `.msi` ‚Üí usa `msiexec.exe /qn /norestart /L*v`.  
   - Si es `.exe` ‚Üí usa `/quiet /norestart /log`.  
   - Todo queda registrado en un log con timestamp en `C:\Logs`.

5. **Valida la actualizaci√≥n**  
   - Vuelve a leer la versi√≥n del ejecutable.  
   - Si cambi√≥ ‚Üí ‚úÖ actualizaci√≥n exitosa.  
   - Si no cambi√≥ o hubo error ‚Üí ‚ö† inicia rollback.

6. **Rollback autom√°tico**  
   - Si el instalador devuelve error, elimina la carpeta nueva y restaura la copia de seguridad.  
   - As√≠ nunca te quedas con la app rota.

---

## ‚öôÔ∏è C√≥mo funciona paso a paso

- **Entrada**: par√°metros (`AppName`, `CurrentExePath`, `DownloadUrl`, `InstallerType`).  
- **Proceso**: descarga ‚Üí backup ‚Üí instalaci√≥n ‚Üí validaci√≥n.  
- **Salida**:  
  - Log detallado en `C:\Logs`.  
  - Mensajes en consola indicando √©xito, advertencia o error.  
  - Si falla, rollback autom√°tico.

---

## üñ•Ô∏è C√≥mo usarlo en tu Gestor de Scripts Universal

T√∫ ya tienes un **UI modular con iconos, ejecuci√≥n paralela y logs**. Este script encaja como **m√≥dulo de actualizaci√≥n**. As√≠ lo integras:

1. **En tu UI**  
   - Agrega un formulario con campos:  
     - Nombre de la app (`AppName`)  
     - Ruta del ejecutable actual (`CurrentExePath`)  
     - URL de descarga (`DownloadUrl`)  
     - Tipo de instalador (`msi` o `exe`)  
   - Bot√≥n: *‚ÄúActualizar‚Äù*.

2. **Ejecuci√≥n desde tu gestor**  
   - Cuando el usuario pulse *Actualizar*, tu gestor lanza:  

     ```powershell
     powershell.exe -ExecutionPolicy Bypass -File ".\Update-Software.ps1" `
         -AppName "MiApp" `
         -CurrentExePath "C:\Program Files\MiApp\MiApp.exe" `
         -DownloadUrl "https://servidor.com/releases/MiApp_v2.0.msi" `
         -InstallerType "msi"
     ```

3. **Captura de salida**  
   - Tu gestor puede leer la salida est√°ndar y mostrar:  
     - Barra de progreso (*Descargando‚Ä¶ Instalando‚Ä¶ Validando‚Ä¶*)  
     - Icono verde si √©xito, rojo si rollback.  
     - Bot√≥n para abrir el log generado.

4. **Extensi√≥n futura**  
   - Leer un **JSON/CSV con varias apps** y actualizarlas en paralelo.  
   - Mostrar un **dashboard** con estado de cada app.  
   - Integrar **notificaciones toast** al terminar cada actualizaci√≥n.  

---

üëâ En resumen: este `.ps1` convierte tu Gestor en un **actualizador universal con rollback seguro**.  
Nunca m√°s te quedar√≠as con una app da√±ada tras un update fallido, porque siempre hay copia de seguridad lista para restaurar.

3. **Gesti√≥n de servicios:** Iniciar/detener/reiniciar servicios con verificaci√≥n de estado y alertas.
 

## üîé Explicaci√≥n de c√≥mo funciona el `Manage-Service.ps1`

1. **Par√°metros de entrada**  
   - `ServiceName`: el nombre del servicio (ejemplo: `"Spooler"` para la cola de impresi√≥n).  
   - `Action`: la acci√≥n a realizar (`Start`, `Stop` o `Restart`).  
   - `LogPath`: carpeta donde se guardar√°n los logs (por defecto `C:\Logs`).  

2. **Preparaci√≥n**  
   - Si la carpeta de logs no existe, la crea.  
   - Genera un archivo de log con timestamp √∫nico.  

3. **Funci√≥n `Write-Log`**  
   - Escribe mensajes en el log y en la consola.  
   - Usa colores para diferenciar niveles:  
     - Verde ‚Üí informaci√≥n/√©xito  
     - Amarillo ‚Üí advertencia  
     - Rojo ‚Üí error  

4. **Detecci√≥n del servicio**  
   - Usa `Get-Service` para verificar que el servicio existe.  
   - Muestra el estado actual (Running, Stopped, etc.).  

5. **Ejecuci√≥n de la acci√≥n**  
   - Si pediste `Start` ‚Üí arranca el servicio si no estaba corriendo.  
   - Si pediste `Stop` ‚Üí lo detiene si estaba activo.  
   - Si pediste `Restart` ‚Üí lo reinicia forzadamente.  
   - Despu√©s de la acci√≥n espera unos segundos (`Start-Sleep`) para que el estado se actualice.  

6. **Verificaci√≥n del estado final**  
   - Vuelve a consultar el estado del servicio.  
   - Si coincide con lo esperado (ejemplo: pediste `Start` y qued√≥ en `Running`) ‚Üí ‚úÖ √©xito.  
   - Si no coincide ‚Üí ‚ùå error, lo registra en el log y lo muestra en rojo.  

7. **Manejo de errores**  
   - Si el servicio no existe o ocurre un fallo, captura la excepci√≥n y la escribe en el log.  

---

## üñ•Ô∏è C√≥mo usarlo en tu Gestor de Scripts Universal

- **UI**:  
  - Campo de texto para el nombre del servicio.  
  - Dropdown con las acciones (`Iniciar`, `Detener`, `Reiniciar`).  
  - Bot√≥n *Ejecutar*.  

- **Ejecuci√≥n**:  
  Tu gestor puede lanzar algo como:  

  ```powershell
  powershell.exe -ExecutionPolicy Bypass -File ".\Manage-Service.ps1" `
      -ServiceName "Spooler" `
      -Action "Restart" `
      -LogPath "C:\Logs"
  ```

- **Integraci√≥n visual**:  
  - Mostrar en tu UI el estado final del servicio.  
  - Usar √≠conos din√°micos: üü¢ si est√° corriendo, üî¥ si est√° detenido, ‚ö† si hubo error.  
  - Bot√≥n para abrir el log generado.  

---

‚úÖ En resumen: este `.ps1` es **funcional y estable**. Te da control sobre cualquier servicio de Windows con logs y verificaci√≥n de estado.  
Lo puedes usar tal cual o integrarlo como **m√≥dulo de administraci√≥n de servicios** dentro de tu Gestor.  


4. **Creaci√≥n de usuarios locales:** Alta, contrase√±as seguras y pertenencia a grupos predefinidos.

## Qu√© hace y por qu√© est√° bien pensado

- **Evita duplicados:** si el usuario existe, no lo recrea y lo reporta.
- **Contrase√±a robusta por defecto:** genera al menos 12‚Äì16 caracteres mezclando min√∫sculas, may√∫sculas, d√≠gitos y s√≠mbolos.
- **Grupos predefinidos:** a√±ade el usuario a los grupos que indiques y valida pertenencia.
- **Pol√≠ticas √∫tiles:** cambio obligatorio de contrase√±a, deshabilitar para staging, registro de expiraci√≥n.
- **Logs claros:** cada paso queda en un archivo con timestamp y niveles (INFO/WARN/ERROR).
- **Compatibilidad:** usa cmdlets modernos y, si fallan, intenta fallback con ‚Äúnet user‚Äù para entornos antiguos.

---

## C√≥mo usarlo con tu Gestor de Scripts Universal

- **UI:**
  - Campos: Usuario, Nombre completo, Descripci√≥n, Lista de grupos (multi-select).
  - Opciones: Forzar cambio de contrase√±a, Deshabilitar usuario, Longitud de contrase√±a.
  - Toggle: ‚ÄúProporcionar contrase√±a‚Äù o ‚ÄúGenerar autom√°ticamente‚Äù.

- **Ejecuci√≥n desde tu gestor:**
  - Generaci√≥n autom√°tica:
    ```powershell
    powershell.exe -ExecutionPolicy Bypass -File ".\Create-LocalUser.ps1" `
        -UserName "deployuser" `
        -FullName "Usuario de despliegue" `
        -Description "Cuenta t√©cnica para despliegues" `
        -Groups @("Administrators","Remote Desktop Users") `
        -PasswordLength 18 `
        -ForceChangeAtNextLogon `
        -LogPath "C:\Logs"
    ```
  - Proporcionando contrase√±a (ej. tomada de tu vault o ingreso manual):
    ```powershell
    $secure = Read-Host "Contrase√±a" -AsSecureString
    powershell.exe -ExecutionPolicy Bypass -File ".\Create-LocalUser.ps1" `
        -UserName "svc_app" `
        -FullName "Servicio de Aplicaci√≥n" `
        -Groups @("Users") `
        -SecurePassword $secure `
        -DisableUser `
        -LogPath "C:\Logs"
    ```

- **Integraci√≥n visual:**
  - Muestra el log en tiempo real (textbox).
  - Iconos: verde si creado y en grupos, amarillo si alg√∫n grupo falt√≥, rojo si error.
  - Historial: guarda en tu auditor√≠a interna los detalles del usuario creado y pertenencia final.

---

## Mejores pr√°cticas que puedes a√±adir

- **Almacenamiento seguro:** si guardas contrase√±as, usa DPAPI/Credential Manager y evita imprimirlas.
- **Plantillas de roles:** define presets de grupos (ej. ‚ÄúOperador‚Äù, ‚ÄúServicio‚Äù, ‚ÄúRDP‚Äù) para selecci√≥n r√°pida.
- **Paralelismo controlado:** creaci√≥n de m√∫ltiples usuarios en cola con l√≠mites de concurrencia.
- **Validaciones de nombre:** normaliza caracteres, evita espacios o acentos si tu pol√≠tica lo requiere.


5. **Pol√≠ticas de firewall:** Habilitar reglas por perfil y puertos con auditor√≠a de cambios.

### Pol√≠ticas de firewall con auditor√≠a de cambios

Esto est√° pensado para ser seguro, reversible y claro. El m√≥dulo habilita reglas por perfiles (Domain/Private/Public), abre/cierra puertos TCP/UDP, aplica etiquetas coherentes, y deja una auditor√≠a con diff de estado antes y despu√©s.

---

## Script base: Set-FirewallPolicy.ps1
---

### Qu√© hace y por qu√© es s√≥lido

- **Acci√≥n expl√≠cita:** abre o cierra puertos con `Mode` controlado.
- **Perfiles controlados:** aplica en Domain/Private/Public seg√∫n definas, evitando cambios globales descontrolados.
- **Idempotencia:** usa nombres de regla calculados (`RulePrefix-AppName-Protocol-Port`) para actualizar o recrear si la configuraci√≥n no coincide.
- **Auditor√≠a completa:** snapshot antes/despu√©s en JSON y diff textual; ‚Äúactions.log‚Äù registra todo con niveles INFO/WARN/ERROR.
- **Seguridad operativa:** direcciona tr√°fico inbound solamente, y deja descripci√≥n con marca de auditor√≠a para rastreabilidad.

---

### C√≥mo usarlo con tu Gestor de Scripts Universal

- **UI:**
  - **Acci√≥n:** Open/Close.
  - **Puertos:** entrada m√∫ltiple (ej. 80, 443, 3389).
  - **Protocolo:** TCP/UDP.
  - **Perfiles:** checkboxes Domain/Private/Public.
  - **Nombre l√≥gico:** AppName (para etiquetar).
  - **Prefijo de regla:** RulePrefix (por ejemplo, ‚ÄúGSU‚Äù).
  - **Carpeta de logs:** opcional.

- **Ejecuci√≥n desde tu gestor:**
  ```powershell
  powershell.exe -ExecutionPolicy Bypass -File ".\Set-FirewallPolicy.ps1" `
      -Mode Open `
      -Ports 80,443 `
      -Protocol TCP `
      -Profiles @("Private","Public") `
      -RulePrefix "GSU" `
      -AppName "WebService" `
      -LogPath "C:\Logs"
  ```

- **Integraci√≥n visual:**
  - **Estado:** muestra ‚Äúactions.log‚Äù en tiempo real y un sumario del diff.
  - **Iconos:** verde si reglas creadas/actualizadas; amarillo si hubo recreaci√≥n; rojo si errores.
  - **Auditor√≠a:** bot√≥n para abrir carpeta de auditor√≠a del timestamp.

---

### Extensiones recomendadas

- **Outbound opcional:** agregar flag para gestionar tr√°fico saliente si tu pol√≠tica lo requiere.
- **Scopes por programa o servicio:** permitir reglas por `Program` o `Service` con filtros Application/Service para mayor precisi√≥n.
- **Plantillas de puertos por rol:** presets tipo ‚ÄúWeb‚Äù, ‚ÄúDB‚Äù, ‚ÄúRDP‚Äù, ‚ÄúSSH‚Äù con listas predefinidas.
- **Revert:** comando que lee el `AuditFolder` y revierte √∫nicamente las reglas `RulePrefix-*` creadas en esa sesi√≥n.


6. **Inventario de hardware:** Exportar CPU, RAM, discos, GPU y firmware a CSV/JSON.
  ### Inventario de hardware con exportaci√≥n a CSV y JSON
---

## Script base: Inventory-Hardware.ps1

---

### Qu√© captura y por qu√© es confiable

- **CPU:** nombre, fabricante, n√∫cleos, hilos, velocidad, caches, ID.  
- **RAM:** por m√≥dulo, capacidad y velocidad normalizadas a GB/MHz.  
- **Discos:** modelo, interfaz, tipo de medio, serial, tama√±o en GB, firmware.  
- **GPU:** nombre, versi√≥n de driver, vendor, VRAM en GB, procesador de video.  
- **Firmware/placa:** BIOS fabricante/versi√≥n/fecha, board fabricante/producto/serial.  
- **Sistema:** fabricante/modelo, RAM total, versi√≥n del sistema operativo.

---

### C√≥mo usarlo en tu Gestor de Scripts Universal

- **UI:**
  - **Etiqueta:** Tag para auditor√≠a (ej. ‚ÄúGSU‚Äù o nombre del cliente).  
  - **Carpeta de salida:** selector para `$OutputPath`.  
  - **Opci√≥n:** toggle para `$IncludePerDeviceCSV` si quieres CSVs por dispositivo.  

- **Ejecuci√≥n desde tu gestor:**
  ```powershell
  powershell.exe -ExecutionPolicy Bypass -File ".\Inventory-Hardware.ps1" `
      -OutputPath "D:\Inventarios\PC-001" `
      -Tag "GSU-PC-001" `
      -LogPath "D:\Inventarios\Logs"
  ```

- **Integraci√≥n visual:**
  - **Resumen r√°pido:** cargar `summary.csv` en tu UI para un dashboard de muchas m√°quinas.  
  - **Detalle t√©cnico:** abrir `summary.json` y las categor√≠as para inspecci√≥n profunda.  
  - **Iconos:** verde si completado; amarillo si faltan clases; rojo si error exportando.  

---

### Extensiones recomendadas

- **Inventario remoto:** iterar sobre una lista de equipos con CIM remoting y consolidar snapshots.  
- **Firma del snapshot:** calcular hash de cada archivo para integridad.  
- **Comparativos:** generar diffs entre snapshots por host para detectar cambios de hardware.  
- **Etiquetas de proyecto:** agregar campos de ubicaci√≥n, responsable y prop√≥sito para auditor√≠a.  

7. **Inventario de software:** Listar apps instaladas por origen (MSI, Store, portable) con versiones.
### Inventario de software por origen con versiones
### Qu√© detecta y c√≥mo clasifica

- **MSI:**
  - **Origen:** entradas de registro en HKLM/HKCU (incluye x86 en WOW6432Node).
  - **Datos:** nombre, versi√≥n, publisher, fecha, ubicaci√≥n e uninstall string.
- **Store (AppX):**
  - **Origen:** paquetes de Microsoft Store v√≠a `Get-AppxPackage`.
  - **Datos:** nombre, versi√≥n, publisher, arquitectura, carpeta de instalaci√≥n, usuario.
- **Portable:**
  - **Origen:** EXE encontrados en carpetas configurables, no registrados como MSI.
  - **Datos:** nombre de producto, versi√≥n, publisher, ruta y tama√±o. Usa metadatos del ejecutable.

---

### C√≥mo integrarlo en tu Gestor de Scripts Universal

- **UI:**
  - **Carpeta de salida:** selector para `$OutputPath`.
  - **Opciones:**
    - **Escanear portable:** toggle para `-ScanPortable`.
    - **Ra√≠ces a escanear:** editor de lista para `$PortableRoots`.
    - **AppX todos los usuarios:** toggle para `-IncludeAllUsersAppX`.
- **Ejecuci√≥n:**
  ```powershell
  powershell.exe -ExecutionPolicy Bypass -File ".\Inventory-Software.ps1" `
      -OutputPath "D:\Inventarios\PC-001" `
      -LogPath "D:\Inventarios\Logs" `
      -ScanPortable `
      -PortableRoots @("D:\Apps","C:\Tools") `
      -IncludeAllUsersAppX
  ```
- **Visualizaci√≥n:**
  - **Tablas:** carga msi.csv, store.csv y portable.csv en tabs separados.
  - **Resumen:** usa summary.csv para mostrar conteos y top publishers.
  - **Iconos:** verde si exportaci√≥n completa; amarillo si portable desactivado; rojo si errores.

---

### Extensiones recomendadas

- **Detecci√≥n de or√≠genes adicionales:** Winget/Chocolatey leyendo sus bases locales para clasificar ‚Äúpaquetes‚Äù.
- **Firmas de integridad:** hashes de EXE portables para control de cambios.
- **Comparativos entre snapshots:** detectar nuevas instalaciones o desinstalaciones.
- **Filtro de sistema:** excluir componentes de Microsoft para ver solo software de terceros.
- **Exportaci√≥n unificada:** generar un √∫nico CSV con columna ‚ÄúOrigin‚Äù para anal√≠tica cruzada.

8. **Hardening de Windows:** Deshabilitar servicios inseguros, SMBv1, macros y autorun.
### Hardening de Windows: deshabilitar servicios inseguros, SMBv1, macros y autorun

### Qu√© endurece y por qu√© es seguro

- **Servicios inseguros:** reduce superficie de ataque (SNMP, Telnet, RemoteRegistry, SSDP/UPnP, NetBIOS/Browser) solo si existen, con parada segura y cambio a inicio deshabilitado.  
- **SMBv1:** elimina el protocolo obsoleto y vulnerable; adem√°s refuerza el stack para evitar invitados inseguros.  
- **Autorun/AutoPlay:** bloquea ejecuci√≥n autom√°tica desde medios externos, mitigando malware de USB/medios.  
- **Macros de Office:** deshabilita macros por pol√≠tica y bloquea contenido marcado desde internet, manteniendo Vista Protegida.

---

### C√≥mo usarlo con tu Gestor de Scripts Universal

- **UI:**
  - Toggle: Dry Run (simular).
  - Toggle: Rollback habilitado.
  - Panel de resultados: muestra hardening.log y diff-services.csv.
- **Ejecuci√≥n:**
  ```powershell
  powershell.exe -ExecutionPolicy Bypass -File ".\Hardening-Windows.ps1" `
      -LogPath "D:\Seguridad\Logs" `
      -AuditPath "D:\Seguridad\Auditoria" `
      -DryRun:$false `
      -EnableRollback
  ```
- **Visualizaci√≥n:**
  - Icono verde si todas las operaciones terminan sin ERROR.
  - Amarillo si hay WARN (servicios ausentes, claves no presentes).
  - Bot√≥n para abrir la carpeta de auditor√≠a de la sesi√≥n.

---

### Extensiones recomendadas

- **Plantillas por rol:** ‚ÄúWorkstation‚Äù, ‚ÄúServer‚Äù, ‚ÄúKiosk‚Äù con listas de servicios y pol√≠ticas diferenciadas.  
- **GPO local autom√°tica:** aplicar las mismas pol√≠ticas v√≠a LGPO para mayor traza.  
- **Reinicio controlado:** programar reinicio si desactivar SMBv1 lo requiere en ciertos builds.  
- **Rollback real:** script complementario que lea el snapshot ‚Äúbefore‚Äù y restaure `StartType` de servicios y valores de registro cambiados.  

9. **Mapeo de unidades:** Conectar y persistir rutas de red con credenciales seguras.
### Mapeo de unidades de red con credenciales seguras y persistencia

### Qu√© hace y por qu√© es s√≥lido

- **M√∫ltiples mapeos en una pasada:** estructura por objetos para definir letra, ruta, etiqueta y persistencia por unidad.
- **Credenciales seguras:** acepta PSCredential en memoria; opcionalmente guarda en Credential Manager para reconexi√≥n sin prompts.
- **Conectividad y verificaci√≥n:** prueba host, acceso al share, mapea y valida que la unidad sea accesible.
- **Persistencia real:** usa net use con /persistent:yes para reconectar al iniciar sesi√≥n.
- **Auditor√≠a:** log por sesi√≥n y resumen en CSV/JSON para tu dashboard.

---

### C√≥mo usarlo en tu Gestor de Scripts Universal

- **UI:**
  - Tabla editable con columnas: DriveLetter, Path, Label, Persist, UseCurrentUser, CredentialTarget.
  - Bot√≥n ‚ÄúAgregar credencial‚Äù que capture PSCredential (usuario/contrase√±a) y opcionalmente la guarde con un nombre en Credential Manager.
  - Toggle ‚ÄúForceRemap‚Äù para recrear mapeos existentes.

- **Ejecuci√≥n:**
  ```powershell
  $cred = [pscredential]::new("DOMINIO\usuario",(Read-Host "Contrase√±a" -AsSecureString))
  $Mappings = @(
    @{ DriveLetter='Z'; Path='\\fileserver01\proyectos'; Label='Proyectos'; Persist=$true; Credential=$cred; CredentialTarget='fileserver01\proyectos' },
    @{ DriveLetter='Y'; Path='\\fileserver01\recursos'; Label='Recursos'; Persist=$true; UseCurrentUser=$true }
  )

  powershell.exe -ExecutionPolicy Bypass -File ".\Map-NetworkDrives.ps1" `
      -Mappings $Mappings `
      -ForceRemap `
      -LogPath "D:\GSU\Logs"
  ```

- **Visualizaci√≥n:**
  - Muestra el log y el resumen (status por unidad).
  - √çconos: verde si OK, amarillo si WARN (host inaccesible/vpn), rojo si ERROR.

---

### Extensiones recomendadas

- **Desconexi√≥n controlada:** m√≥dulo complementario ‚ÄúUnmap-NetworkDrives.ps1‚Äù con lista de unidades a desmontar y auditor√≠a.
- **Plantillas por rol:** ‚ÄúDise√±o‚Äù, ‚ÄúContabilidad‚Äù, ‚ÄúOperaciones‚Äù con conjuntos de shares predefinidos.
- **Validaci√≥n de permisos:** prueba de lectura/escritura creando un archivo temporal en el share para verificar permisos efectivos.
- **Reconexi√≥n autom√°tica:** tarea programada que remapea si el share cae o cambia la red (ideal para laptops).

10. **Limpieza de cach√©s:** Vaciar temp, prefetch y logs antiguos con exclusiones inteligentes.
### Limpieza de cach√©s con exclusiones inteligentes, auditor√≠a y modo seguro

### Qu√© hace y por qu√© es s√≥lido

- **Rutas clave:** limpia Temp del usuario y, opcionalmente, Temp del sistema y Prefetch sin tocar archivos recientes cr√≠ticos.  
- **Logs antiguos:** borra logs viejos por d√≠as y tama√±o, enfoc√°ndose en lo que realmente libera espacio.  
- **Exclusiones inteligentes:** evita rutas sensibles y patrones de archivos importantes; configurable para tus reglas.  
- **Seguridad operativa:** evita eliminar archivos en uso, reintenta, y ofrece **DryRun** para validar antes.  
- **Auditor√≠a completa:** actions.log registra cada acci√≥n; summary.csv/json dan cifras para tu dashboard.

---

### C√≥mo usarlo en tu Gestor de Scripts Universal

- **UI:**
  - **Toggles:** IncludePrefetch, IncludeSystemTemp, DryRun.
  - **Par√°metros:** LogRetentionDays, MinLogSizeMB.
  - **Listas editables:** ExtraLogRoots, ExcludePaths, ExcludePatterns, AdditionalTempDirs.
  - **Bot√≥n:** Ejecutar limpieza.

- **Ejecuci√≥n:**
  ```powershell
  powershell.exe -ExecutionPolicy Bypass -File ".\Clean-Caches.ps1" `
      -LogRetentionDays 21 `
      -MinLogSizeMB 10 `
      -IncludePrefetch `
      -IncludeSystemTemp `
      -ExtraLogRoots @("D:\AppLogs","C:\ProgramData\MyApp\Logs") `
      -ExcludePaths @("C:\ProgramData\MyApp\Config") `
      -ExcludePatterns @("*.conf","*.cfg") `
      -LogPath "D:\GSU\Logs"
  ```

- **Visualizaci√≥n:**
  - **Estado en vivo:** muestra actions.log.
  - **Resumen:** carga summary.csv/json y pinta un indicador de espacio liberado.
  - **Iconos:** verde si se liber√≥ espacio; amarillo si DryRun; rojo si hubo errores.

---

### Extensiones recomendadas

- **Planificador:** tarea programada semanal con par√°metros predefinidos y notificaci√≥n al finalizar.  
- **Prueba de impacto:** comparar tama√±o de Temp antes y despu√©s y graficarlo en tu dashboard.  
- **Pol√≠tica por rol:** perfiles ‚ÄúWorkstation‚Äù, ‚ÄúDev‚Äù, ‚ÄúServer‚Äù con exclusiones y ra√≠ces distintas.  
- **Cuota de limpieza:** l√≠mites por sesi√≥n (no borrar m√°s de X GB) para entornos delicados.  

11. **Rotaci√≥n de logs:** Comprimir, mover y purgar por antig√ºedad y tama√±o.
- **Prop√≥sito:** Automatizar la rotaci√≥n de logs en Windows: comprimir archivos antiguos, moverlos a un repositorio de archivo, y purgar por antig√ºedad y/o tama√±o total. Previene crecimientos descontrolados y mantiene trazabilidad con auditor√≠a en CSV/JSON.
- **Alcance:**  
  - **Entradas:** rutas de logs, ruta de archivo, d√≠as para comprimir/purgar, tama√±o m√°ximo del archivo, modo DryRun, patrones de exclusi√≥n.  
  - **Salidas:** archivos .zip por carpeta/fecha, logs de ejecuci√≥n, auditor√≠a en CSV/JSON, reporte final en consola.  
  - **Validaciones:** existencia de rutas, permisos de escritura, idempotencia (no recomprimir ni mover duplicados), exclusi√≥n segura de archivos en uso y rutas sensibles.

## Explicaci√≥n de uso

### Par√°metros

- **LogRoots:** Rutas de carpetas donde est√°n los logs a gestionar.  
- **ArchivePath:** Carpeta destino para los archivos comprimidos y repositorio de archivo.  
- **CompressAfterDays:** D√≠as de antig√ºedad para entrar en compresi√≥n (por defecto 7).  
- **PurgeAfterDays:** D√≠as de antig√ºedad para purgar archivos originales (por defecto 30).  
- **MaxArchiveSizeMB:** Tama√±o m√°ximo del repositorio de archivo; si se supera, purga ZIPs m√°s antiguos.  
- **DryRun:** Simula todas las acciones, genera auditor√≠a, no modifica archivos.  
- **ExcludePatterns:** Patrones tipo wildcard para no tocar archivos sensibles o en uso.  
- **ExecutionLogPath:** Ruta del log de ejecuci√≥n; si no se indica, se crea en %TEMP%\LogRotation.  
- **AuditCsvPath / AuditJsonPath:** Rutas para la auditor√≠a; se crean por defecto en %TEMP%\LogRotation.  
- **VerboseConsole:** Imprime el log de ejecuci√≥n en consola adem√°s de archivo.  
- **IncludeEmptyDirs:** Habilita limpieza de directorios vac√≠os tras la rotaci√≥n.

### Ejecuci√≥n directa

- **Prueba en modo simulaci√≥n (segura):**
  - **Comando:**  
    ```
    .\Rotate-Logs.ps1 -LogRoots "C:\Logs\App1","C:\Logs\App2" -ArchivePath "D:\Archive\Logs" -DryRun -VerboseConsole
    ```
- **Ejecuci√≥n real con defaults:**
  - **Comando:**  
    ```
    .\Rotate-Logs.ps1 -LogRoots "C:\Logs" -ArchivePath "D:\Archive\Logs"
    ```
- **Con l√≠mites espec√≠ficos:**
  - **Comando:**  
    ```
    .\Rotate-Logs.ps1 -LogRoots "C:\IISLogs","C:\ServiceLogs" -ArchivePath "\\NAS01\Archive\Logs" -CompressAfterDays 3 -PurgeAfterDays 15 -MaxArchiveSizeMB 1024 -ExcludePatterns "*.log.current","*.tmp" -VerboseConsole
    ```

### Integraci√≥n en tu Gestor de Scripts Universal

- **Llamada desde UI:**  
  - **Acci√≥n:** ‚ÄúRotaci√≥n de logs‚Äù con icono de archivo-zip y un badge de ‚ÄúDryRun‚Äù si est√° activo.  
  - **Par√°metros visibles:**  
    - **LogRoots:** selector m√∫ltiple de carpetas (persistentes por perfil).  
    - **ArchivePath:** selector de carpeta destino (permite UNC/NAS).  
    - **CompressAfterDays / PurgeAfterDays / MaxArchiveSizeMB:** sliders con valores por defecto y tooltips.  
    - **DryRun / IncludeEmptyDirs / VerboseConsole:** toggles.  
    - **ExcludePatterns:** cuadro multi-l√≠nea con presets por rol (IIS, SQL, App).  
  - **Estado en tiempo real:** muestra el **ExecutionLogPath** y contador de acciones del resumen.  
  - **Salida:** enlaces al **CSV/JSON** de auditor√≠a y al **log** final.

- **Ejecuci√≥n desde backend (ejemplo):**
  - **PowerShell:**  
    ```
    $args = @{
      LogRoots = @("C:\Logs\App1","C:\Logs\App2")
      ArchivePath = "D:\Archive\Logs"
      CompressAfterDays = 7
      PurgeAfterDays = 30
      MaxArchiveSizeMB = 2048
      DryRun = $false
      ExcludePatterns = @("*.lock","*.tmp","*.log.current")
      VerboseConsole = $true
    }
    Start-Process powershell -ArgumentList "-NoProfile","-ExecutionPolicy","Bypass","-File","Rotate-Logs.ps1", @(
      "-LogRoots", ($args.LogRoots -join ","),
      "-ArchivePath", $args.ArchivePath,
      "-CompressAfterDays", $args.CompressAfterDays,
      "-PurgeAfterDays", $args.PurgeAfterDays,
      "-MaxArchiveSizeMB", $args.MaxArchiveSizeMB,
      $args.DryRun ? "-DryRun" : "",
      "-ExcludePatterns", ($args.ExcludePatterns -join ","),
      $args.VerboseConsole ? "-VerboseConsole" : ""
    ) -Wait
    ```
  - **UI:** muestra progreso por ra√≠z (barra) y totales por acci√≥n (tabla compacta: Compress, Purge-Age, Purge-Size).

---

## Pensamiento profundo aplicado

- **Robustez:**
  - **Idempotencia:** ZIP nombrado por carpeta+fecha; si existe, no se recrea. Evita recomprimir duplicados.  
  - **Bloqueos:** detecci√≥n de archivos bloqueados para no intentar comprimir/purgar.  
  - **Exclusiones:** patrones wildcard para evitar tocar transacciones en curso (*.current, *.lck, *.tmp).  
  - **Estructura de archivo:** YYYY/MM/DD/source para trazabilidad y limpieza por periodos.

- **Auditor√≠a:**
  - **Detalles:** cada acci√≥n con timestamp, source, target, tama√±o y status (OK/ERROR/DRYRUN).  
  - **Formatos:** CSV para an√°lisis r√°pido y JSON para integraci√≥n en tu gestor/reportes.  
  - **Resumen final:** tabla con conteo y tama√±o agregado por acci√≥n.  
  - **Logs:** archivo de ejecuci√≥n con niveles INFO/WARN/ERROR y opcional salida en consola.

- **Escalabilidad:**
  - **Multirra√≠z:** procesa N carpetas en una sola corrida.  
  - **Control de tama√±o:** purga incremental de ZIPs antiguos hasta cumplir el umbral.  
  - **Paralelismo opcional (extensi√≥n):** se puede paralelizar por ra√≠z con Start-Job/ThreadJob garantizando lock de escritura al CSV/JSON mediante colas y merge al final.

- **Seguridad:**
  - **Rutas seguras:** no hardcodea rutas; defaults se crean en %TEMP%\LogRotation para logs/auditor√≠a.  
  - **Evitar borrados cr√≠ticos:** purga solo en ra√≠ces especificadas; nunca toca ArchivePath fuera de *.zip.  
  - **Rollback b√°sico:** DryRun para verificar; en ejecuci√≥n real, las purgas son definitivas. Para rollback extendido, ver extensiones.  
  - **Permisos:** valida existencia y crea directorios; si falla, registra en auditor√≠a sin abortar toda la corrida.

---

## Extensiones recomendadas

- **Mejoras opcionales:**
  - **Multihost:** ejecutar en varios equipos v√≠a WinRM/PSRemoting con preset de ra√≠ces por rol (IIS, SQL, App).  
  - **Notificaciones:** resumen por correo/Teams con tabla de acciones y enlaces al CSV/JSON.  
  - **Perfiles/presets:** JSON de configuraci√≥n por entorno (DEV/QA/PROD) consumido por el m√≥dulo.  
  - **Comparativos:** hash de ZIP (SHA256) y diff de conteos por d√≠a para detectar anomal√≠as.  
  - **Compresi√≥n inteligente:** agrupar por tama√±o objetivo (p. ej., ~500MB por zip) y por fecha de √∫ltima escritura.

- **Siguiente paso (propuesta concreta):**
  - **Paralelismo por ra√≠z con merge de auditor√≠a:** lanzar un job por LogRoot, escribir auditor√≠a temporal aislada y al finalizar, merge secuencial y consolidaci√≥n de resumen.  
  - **Rollback extendido:** mover a ‚Äú.trash‚Äù dentro de ArchivePath por 24‚Äì48h antes de eliminaci√≥n definitiva, con tarea de limpieza programada.  
  - **Preset JSON:** a√±ade un par√°metro `-ConfigPath` que cargue LogRoots, exclusiones y umbrales.  
  - **UI:** tarjetas por ra√≠z con contadores en vivo y un toggle ‚ÄúSimulaci√≥n‚Äù prominente. Badge de l√≠mite de archivo cuando el umbral se exceda.

12. **Sincronizaci√≥n de carpetas:** Copiar diferencial con checksum (robocopy + resumen).
## Resumen del m√≥dulo

- **Prop√≥sito:** Sincronizar carpetas de forma diferencial y confiable en Windows, usando Robocopy para rendimiento y un verificador de checksum (SHA256 por defecto) para asegurar integridad de los archivos copiados. Genera auditor√≠as en CSV/JSON y un resumen de resultados para trazabilidad.
- **Alcance:**
  - **Entradas:** origen/destino, patrones de inclusi√≥n/exclusi√≥n, modo espejo (mirror), verificaci√≥n de checksum, concurrencia, reintentos, ejecuci√≥n en simulaci√≥n (DryRun).
  - **Salidas:** log de ejecuci√≥n detallado, auditor√≠a CSV/JSON con cada acci√≥n (copiar/actualizar/eliminar/verificado), y un resumen de conteos y tama√±os.
  - **Validaciones:** existencia y permisos de rutas, idempotencia (robocopy diferencial), control seguro de eliminaciones (solo si Mirror=true), y manejo de archivos de sistema/ocultos si se desea.

## Explicaci√≥n de uso

### Par√°metros

- **Source / Destination:** Carpetas de origen y destino a sincronizar.
- **IncludePatterns / ExcludePatterns:** Wildcards para incluir o excluir archivos (ej.: ‚Äú*.log‚Äù, ‚Äú*.tmp‚Äù). Incluye subcarpetas.
- **Mirror:** Si est√° activo, replica en destino eliminando elementos que ya no existen en origen (comportamiento tipo /MIR).
- **VerifyChecksum:** Calcula hash en origen y destino para los archivos copiados/actualizados y confirma integridad.
- **ChecksumAlgorithm:** SHA256 (por defecto), SHA1 o MD5.
- **ThreadCount, RetryCount, WaitSeconds:** Control de concurrencia y reintentos de Robocopy.
- **PreserveAttributes:** Copia atributos y timestamps de directorios tambi√©n (DCOPY:T).
- **UseLongPaths:** Usa el prefijo \\?\ para manejar rutas largas (NTFS) y UNC largas.
- **CopyHiddenSystem:** Incluye archivos Hidden y System si tu caso lo requiere.
- **DryRun:** No modifica nada; lista y audita como simulaci√≥n.
- **ExecutionLogPath, AuditCsvPath, AuditJsonPath, SummaryReportPath:** Rutas de salida; si no se especifican, se crean en %TEMP%\FolderSync.

### Ejecuci√≥n directa

- **Prueba segura (simulaci√≥n):**
  ```
  .\Sync-Folders.ps1 -Source "C:\Data" -Destination "D:\Backup\Data" -DryRun -VerifyChecksum -IncludePatterns "*.*" -ExcludePatterns "*.tmp","*.bak"
  ```
- **Copia diferencial est√°ndar:**
  ```
  .\Sync-Folders.ps1 -Source "C:\Projects" -Destination "\\NAS\Backup\Projects" -ThreadCount 8 -RetryCount 2 -WaitSeconds 2 -VerifyChecksum
  ```
- **Modo espejo con verificaci√≥n y rutas largas:**
  ```
  .\Sync-Folders.ps1 -Source "C:\Media" -Destination "E:\MediaMirror" -Mirror -VerifyChecksum -ChecksumAlgorithm SHA256 -UseLongPaths -PreserveAttributes -ExcludePatterns "*.lck","*.tmp"
  ```

### Integraci√≥n en tu Gestor de Scripts Universal

- **UI sugerida:**
  - **Icono:** doble carpeta con flechas; badge ‚ÄúDryRun‚Äù cuando corresponda.
  - **Campos:** 
    - **Source/Destination:** selector de carpeta con historial por perfil.
    - **Include/ExcludePatterns:** cuadro multi-l√≠nea con presets (Dev, Logs, Media).
    - **Mirror, VerifyChecksum, UseLongPaths, PreserveAttributes, CopyHiddenSystem:** toggles.
    - **ThreadCount/RetryCount/WaitSeconds:** sliders con tooltips.
  - **Estado en vivo:** stream del **ExecutionLogPath** y progreso por conteos (Copied, Skipped, Deleted, Verify).
  - **Salida:** enlaces a **Audit CSV/JSON**, **Robocopy raw log** y **Summary report**.

- **Llamada desde backend (ejemplo):**
  ```
  $args = @{
    Source = "C:\Data"
    Destination = "\\NAS01\Archive\Data"
    IncludePatterns = @("*.*")
    ExcludePatterns = @("*.tmp","*.lock")
    Mirror = $false
    VerifyChecksum = $true
    ThreadCount = 8
    RetryCount = 2
    WaitSeconds = 2
    UseLongPaths = $true
  }

  Start-Process powershell -ArgumentList @(
    "-NoProfile","-ExecutionPolicy","Bypass","-File","Sync-Folders.ps1",
    "-Source", $args.Source,
    "-Destination", $args.Destination,
    "-IncludePatterns", ($args.IncludePatterns -join ","),
    "-ExcludePatterns", ($args.ExcludePatterns -join ","),
    $args.Mirror ? "-Mirror" : "",
    $args.VerifyChecksum ? "-VerifyChecksum" : "",
    "-ThreadCount", $args.ThreadCount,
    "-RetryCount", $args.RetryCount,
    "-WaitSeconds", $args.WaitSeconds,
    $args.UseLongPaths ? "-UseLongPaths" : "",
    $args.PreserveAttributes ? "-PreserveAttributes" : "",
    $args.CopyHiddenSystem ? "-CopyHiddenSystem" : ""
  ) -Wait
  ```

---

## Pensamiento profundo aplicado

- **Robustez:**
  - **Idempotencia:** Robocopy copia solo cambios; con /FFT se minimizan falsos positivos entre NTFS/FAT/UNC. DryRun permite validar efectos sin tocar archivos.
  - **Rutas largas:** opci√≥n de \\?\ para evitar errores por path > 260 caracteres.
  - **Bloqueos y reintentos:** /R y /W controlan reintentos; /MT acelera entrenamiento sin saturar I/O.
  - **Atributos:** preserva timestamps y atributos cuando es necesario (DCOPY:T).

- **Auditor√≠a:**
  - **Eventos:** Robocopy-Run (con conteos), Verify (OK/MISMATCH), Delete (si Mirror), y errores.
  - **Formatos:** CSV para an√°lisis inmediato y JSON para integraciones y paneles.
  - **Resumen final:** reporte TXT legible con totales y tama√±os, y enlaces a logs.

- **Escalabilidad:**
  - **Concurrencia:** Robocopy /MT:8 configurable; presets por tipo de contenido (p. ej., Media = MT:32).
  - **Multihost:** ejecutable remotamente v√≠a PSRemoting con rutas UNC; auditor√≠as centralizadas en NAS.
  - **Plantillas:** perfiles por rol (Dev/Logs/Media) con Include/Exclude y atributos predefinidos.

- **Seguridad:**
  - **Mirror con cautela:** solo elimina en destino si Mirror=true; DryRun recomendado antes de activar.
  - **Exclusiones:** evita archivos temporales/lock para reducir inconsistencias.
  - **Integridad:** checksum post-copia detecta divergencias; si hay MISMATCH, queda registrado para remediaci√≥n.

- **Fallbacks y l√≠mites:**
  - **Parseo robusto:** el resumen se infiere del output de Robocopy; si el formato var√≠a, el m√≥dulo sigue funcionando porque la auditor√≠a por archivo viene del verificador y no de la tabla.
  - **Errores parciales:** no detiene todo el proceso; registra y contin√∫a donde sea razonable.

---

## Extensiones recomendadas

- **Mejoras opcionales:**
  - **Lista exacta de archivos copiados:** parseo de /LOG para eventos ‚ÄúNew File‚Äù/‚ÄúNewer‚Äù y auditor√≠a por archivo, con tama√±o.
  - **Reintento de mismatches:** recopia autom√°ticamente los archivos con MISMATCH hasta N intentos y marca resultado.
  - **Notificaciones:** env√≠o de resumen a correo/Teams con m√©tricas y enlaces a logs.
  - **Presets por rol:** `-ConfigPath` JSON con perfiles (DEV/QA/PROD) que definen patrones, atributos y espejo.
  - **Comparativos entre snapshots:** guardar inventario antes/despu√©s (CSV) y generar diff con cambios.

- **Siguiente paso (propuesta concreta):**
  - **A√±adir -ConfigPath y multirra√≠z:** permitir una lista de pares Source/Destination, ejecutados en paralelo (ThreadJob) y merge de auditor√≠a al final.
  - **Auto-remediaci√≥n de checksum:** si `VerifyChecksum` detecta MISMATCH, reintento de copia y, si persiste, mover a una cuarentena en destino para revisi√≥n.
  - **UI:** barra por par (S/D), contador en vivo (Copied/Deleted/Verify), y badge alerta si hay MISMATCH>0.

13. **Backup incremental:** Programar copias versi√≥nadas con retenci√≥n y verificaci√≥n. 
## Resumen del m√≥dulo

- **Prop√≥sito:** Realizar backups incrementales versi√≥nados en Windows con verificaci√≥n de integridad y pol√≠ticas de retenci√≥n. Cada ejecuci√≥n crea una ‚Äúversi√≥n‚Äù con metadatos, un cat√°logo de archivos, auditor√≠a CSV/JSON, y controla la retenci√≥n por edad y/o n√∫mero de versiones. Opcionalmente, programa la tarea en el Programador de tareas de Windows.
- **Alcance:**
  - **Entradas:** origen, ra√≠z de backup, nombre l√≥gico del conjunto, retenci√≥n por d√≠as y por cantidad de versiones, verificaci√≥n de checksum, concurrencia, simulaci√≥n (DryRun), programaci√≥n.
  - **Salidas:** carpeta de versi√≥n con estructura y manifiesto, auditor√≠a CSV/JSON, log de ejecuci√≥n, resumen final, y verificaci√≥n de integridad (OK/MISMATCH).
  - **Validaciones:** existencia de rutas, permisos, idempotencia (catalogar y copiar solo cambios), l√≠mites seguros en retenci√≥n (no borra fuera del conjunto), y tratamiento de rutas largas.

## Explicaci√≥n de uso

### Par√°metros

- **Source:** Carpeta origen a respaldar.
- **RootBackup:** Carpeta ra√≠z donde se guardar√°n los backups versi√≥nados.
- **SetName:** Nombre del conjunto (alfanum√©rico, guion y guion bajo). Define la subcarpeta del conjunto.
- **RetentionDays / RetentionVersions:** Pol√≠tica de retenci√≥n por antig√ºedad y por n√∫mero m√°ximo de versiones. Se aplican ambas.
- **VerifyChecksum / ChecksumAlgorithm:** Verifica integridad comparando hashes entre origen y versi√≥n (SHA256 por defecto).
- **ThreadCount / RetryCount / WaitSeconds:** Concurrencia y reintentos de Robocopy.
- **IncludePatterns / ExcludePatterns:** Wildcards para controlar qu√© se copia.
- **UseLongPaths:** Habilita prefijos \\?\ para rutas largas.
- **DryRun:** Simula la ejecuci√≥n (copia y retenci√≥n sin modificar), pero genera manifiesto, cat√°logo y auditor√≠a.
- **ExecutionLogPath / AuditCsvPath / AuditJsonPath / SummaryReportPath:** Rutas de salida; se crean por defecto en %TEMP%\BackupIncremental.
- **RegisterSchedule / ScheduleName / ScheduleTrigger:** Registrar/actualizar tarea en el Programador de tareas. Soporta: ‚ÄúDaily HH:MM‚Äù, ‚ÄúHourly‚Äù, ‚ÄúWeekly Sun 03:00‚Äù.

### Ejecuci√≥n directa

- **Prueba segura (simulaci√≥n):**
  ```
  .\Backup-Incremental.ps1 -Source "C:\Data" -RootBackup "D:\Backups" -SetName "DataMain" -DryRun -VerifyChecksum
  ```
- **Backup con verificaci√≥n y retenci√≥n est√°ndar:**
  ```
  .\Backup-Incremental.ps1 -Source "C:\Projects" -RootBackup "\\NAS\Backups" -SetName "Projects" -RetentionDays 30 -RetentionVersions 20 -VerifyChecksum -ThreadCount 8
  ```
- **Programado diario 02:00 con rutas largas:**
  ```
  .\Backup-Incremental.ps1 -Source "C:\Media" -RootBackup "E:\Backups" -SetName "Media" -VerifyChecksum -RegisterSchedule -ScheduleName "BackupMedia" -ScheduleTrigger "Daily 02:00" -UseLongPaths
  ```

### Integraci√≥n en tu Gestor de Scripts Universal

- **UI sugerida:**
  - **Icono:** caja/drive con reloj; badge ‚ÄúVerify‚Äù si activo.
  - **Campos:**
    - **Source / RootBackup / SetName:** selectores y texto con validaci√≥n de SetName.
    - **RetentionDays / RetentionVersions:** sliders con tooltips.
    - **Include/ExcludePatterns:** cuadro multi-l√≠nea con presets (Dev, Logs, Media).
    - **VerifyChecksum, UseLongPaths, DryRun:** toggles.
    - **ThreadCount, RetryCount, WaitSeconds:** sliders.
    - **RegisterSchedule / ScheduleName / ScheduleTrigger:** controles para programaci√≥n.
  - **Estado en vivo:** stream del **ExecutionLogPath** y contadores por acci√≥n (Version-Created, Verify, Retention-Age, Retention-Count).
  - **Salida:** enlaces a **manifest.json**, **catalog.csv**, **robocopy.log**, **Audit CSV/JSON** y **Summary**.

- **Llamada desde backend (ejemplo):**
  ```
  $args = @{
    Source = "C:\Data"
    RootBackup = "D:\Backups"
    SetName = "DataMain"
    RetentionDays = 30
    RetentionVersions = 20
    VerifyChecksum = $true
    ThreadCount = 8
    RetryCount = 2
    WaitSeconds = 2
    UseLongPaths = $true
  }

  Start-Process powershell -ArgumentList @(
    "-NoProfile","-ExecutionPolicy","Bypass","-File","Backup-Incremental.ps1",
    "-Source", $args.Source,
    "-RootBackup", $args.RootBackup,
    "-SetName", $args.SetName,
    "-RetentionDays", $args.RetentionDays,
    "-RetentionVersions", $args.RetentionVersions,
    $args.VerifyChecksum ? "-VerifyChecksum" : "",
    "-ThreadCount", $args.ThreadCount,
    "-RetryCount", $args.RetryCount,
    "-WaitSeconds", $args.WaitSeconds,
    $args.UseLongPaths ? "-UseLongPaths" : ""
  ) -Wait
  ```

---

## Pensamiento profundo aplicado

- **Robustez:**
  - **Versionado determinista:** estructura por fecha evita colisiones y facilita limpieza por periodos.
  - **Idempotencia operativa:** Robocopy realiza copiado diferencial; DryRun valida antes de ejecutar real.
  - **Rutas largas:** soporte \\?\ para evitar fallos por l√≠mites de 260 caracteres.
  - **Cat√°logo y manifiesto:** snapshot por versi√≥n para auditor√≠a y trazabilidad.

- **Auditor√≠a y verificaci√≥n:**
  - **Eventos:** Version-Created, Verify (OK/MISMATCH), Retention-Age, Retention-Count, Schedule-Register, errores.
  - **Formatos:** CSV y JSON con tama√±os y estados; log crudo de Robocopy para an√°lisis avanzado.
  - **Resumen:** reporte consolidado con conteos y tama√±os, √∫til para tu UI y notificaciones.

- **Retenci√≥n segura:**
  - **Doble pol√≠tica:** edad y cantidad; elimina solo dentro del conjunto ($SetName).
  - **Orden estable:** selecci√≥n FIFO por orden de las rutas versi√≥n (YYYY/MM/DD/HHmmss).

- **Escalabilidad:**
  - **Concurrencia:** /MT configurable; presets por tipo de contenido.
  - **Multiconjuntos:** puedes lanzar m√∫ltiples instancias con distintos SetName; opcional -ConfigPath en extensi√≥n.
  - **NAS/UNC:** soporte UNC y programaci√≥n para ventanas de mantenimiento.

- **Seguridad:**
  - **Exclusiones inteligentes:** evita temporales y locks comunes.
  - **DryRun:** previa obligatoria en entornos cr√≠ticos.
  - **Programaci√≥n controlada:** argumentos expl√≠citos y ExecutionPolicy Bypass solo para la tarea.

---

## Extensiones recomendadas

- **Mejoras opcionales:**
  - **-ConfigPath (JSON/YAML):** definir m√∫ltiples conjuntos con retenci√≥n y patrones por rol (DEV/QA/PROD), ejecuci√≥n en paralelo y merge de auditor√≠as.
  - **Compresi√≥n por versi√≥n:** opci√≥n `-CompressVersion` para crear un ZIP del cat√°logo y/o de ciertos subdirectorios; almacenamiento h√≠brido.
  - **Notificaciones:** env√≠o de resumen por correo/Teams con links a manifest, catalog y auditor√≠as.
  - **Deduplicaci√≥n simple:** c√°lculo de hashes para evitar almacenar duplicados grandes entre versiones (marcar referencias, no borrar).
  - **Restore helper:** script complementario para restaurar una versi√≥n o archivo, con b√∫squeda por cat√°logo.

- **Siguiente paso (propuesta concreta):**
  - A√±adir `-ConfigPath` para orquestar m√∫ltiples backups en un solo run, con ThreadJobs por conjunto y consolidaci√≥n de auditor√≠a.  
  - Implementar ‚Äúcuarentena de inconsistencias‚Äù: si `VerifyChecksum` detecta MISMATCH, recopia 1 vez y, si persiste, marca en cat√°logo y alerta en UI.  
  - Integrar con tu Gestor: tarjetas por conjunto con medallas de ‚ÄúVersion OK‚Äù, ‚ÄúRetention Applied‚Äù, ‚ÄúMISMATCH>0‚Äù y un gr√°fico de versiones en el tiempo.

14. **Restauraci√≥n r√°pida:** Reconstruir perfiles o apps desde backup con reporte final.
## Resumen del m√≥dulo

- **Prop√≥sito:** Restaurar r√°pidamente perfiles de usuario o aplicaciones desde backups versi√≥nados, con selecci√≥n simple de versi√≥n y componentes, validaciones de integridad, y un reporte final (CSV/JSON/TXT) para auditor√≠a. Enfocado en tiempos de recuperaci√≥n cortos y m√≠nima fricci√≥n.
- **Alcance:**
  - **Entradas:** ra√≠z de backup, conjunto (`SetName`), versi√≥n (auto-selecci√≥n por UI simple), origen para cat√°logo, destino de restauraci√≥n, modo de sobreescritura, filtros de rutas, verificaci√≥n de checksum, simulaci√≥n (`DryRun`).
  - **Salidas:** restauraci√≥n diferencial (solo faltantes/diferentes), reporte final (ejecuci√≥n + auditor√≠a CSV/JSON + resumen), logs detallados, y validaci√≥n (OK/MISMATCH).
  - **Validaciones:** existencia de versi√≥n y cat√°logo, rutas y permisos, idempotencia (no recopia id√©nticos), seguridad (exclusiones), y ‚ÄúUI‚Äù simple para selecci√≥n (Out-GridView con fallback TTY).

## Explicaci√≥n de uso

### Par√°metros

- **RootBackup / SetName:** Ubicaci√≥n del conjunto de backups versi√≥nados (estructura YYYY/MM/DD/HHmmss). El script detecta versiones autom√°ticamente.
- **VersionPath:** Ruta exacta de la versi√≥n a restaurar. Si no se indica, la UI simple permite elegir o se toma la m√°s reciente.
- **RestoreTarget:** Carpeta destino donde se reconstruir√° el perfil/app.
- **Overwrite:** No es necesario, Robocopy maneja diferencias; √∫salo como intenci√≥n informativa en tu UI (el m√≥dulo ya copia diferencial).
- **IncludeSubpaths:** Lista de subcarpetas relativas a la versi√≥n para restaurar; por defecto ‚Äú*‚Äù (todo).
- **ExcludePatterns:** Patrones a excluir (temporales, locks, etc.).
- **VerifyChecksum / ChecksumAlgorithm:** Valida integridad de los archivos restaurados.
- **ThreadCount / RetryCount / WaitSeconds:** Concurrencia y reintentos del Robocopy.
- **UseLongPaths:** Manejo de rutas largas \\?\ para NTFS y UNC.
- **DryRun:** Simula la restauraci√≥n (lista, auditor√≠a y reporte) sin copiar.

### Ejecuci√≥n directa

- **Restaurar todo desde la √∫ltima versi√≥n (simulaci√≥n + verificaci√≥n):**
  ```
  .\Restore-Quick.ps1 -RootBackup "D:\Backups" -SetName "DataMain" -RestoreTarget "C:\Data" -DryRun -VerifyChecksum
  ```
- **Restaurar versi√≥n espec√≠fica y solo subcarpetas:**
  ```
  .\Restore-Quick.ps1 -RootBackup "\\NAS\Backups" -SetName "Projects" -VersionPath "\\NAS\Backups\Projects\2025\10\17\124200" -RestoreTarget "D:\Projects" -IncludeSubpaths "RepoA","RepoB" -VerifyChecksum
  ```
- **Rutas largas y exclusiones adicionales:**
  ```
  .\Restore-Quick.ps1 -RootBackup "E:\Backups" -SetName "Media" -RestoreTarget "C:\Media" -UseLongPaths -ExcludePatterns "*.tmp","*.lck","*.cache"
  ```

### Integraci√≥n en tu Gestor de Scripts Universal (UI simple)

- **Interacci√≥n m√≠nima:**
  - **Selecci√≥n de versi√≥n:** abre Out-GridView con lista de versiones (fecha y tama√±o). Si no hay UI, usa la m√°s reciente y lo indica en log.
  - **Selecci√≥n de subcarpetas:** segundo Out-GridView para marcar subcarpetas; si se omite, restaura todo.
- **Llamada desde backend (ejemplo):**
  ```
  $args = @{
    RootBackup = "D:\Backups"
    SetName = "DataMain"
    RestoreTarget = "C:\Data"
    VerifyChecksum = $true
    ThreadCount = 8
    UseLongPaths = $true
  }
  Start-Process powershell -ArgumentList @(
    "-NoProfile","-ExecutionPolicy","Bypass","-File","Restore-Quick.ps1",
    "-RootBackup",$args.RootBackup,"-SetName",$args.SetName,"-RestoreTarget",$args.RestoreTarget,
    $args.VerifyChecksum ? "-VerifyChecksum" : "",
    "-ThreadCount",$args.ThreadCount,
    $args.UseLongPaths ? "-UseLongPaths" : ""
  ) -Wait
  ```
- **Visualizaci√≥n de estado en tu UI:**
  - **Log en vivo:** tail del ExecutionLogPath.
  - **Contadores:** Restore-Run, Verify (OK/MISMATCH/MISSING).
  - **Salida:** enlaces a Robocopy raw log, auditor√≠as y resumen final.

---

## Pensamiento profundo aplicado

- **Robustez:**
  - **Idempotencia:** Robocopy copia solo lo que falta o difiere; evita recopia y minimiza riesgo.
  - **UI simple:** Out-GridView reduce fricci√≥n y errores humanos en la selecci√≥n; fallback seguro a la √∫ltima versi√≥n.
  - **Rutas largas:** opci√≥n \\?\ para evitar fallos por path > 260 chars.
  - **Subcarpetas:** restauraci√≥n granular por componentes de perfiles/apps, √∫til para RTO corto.

- **Auditor√≠a y reporte:**
  - **Eventos:** Restore-Run por run (global o por subpath) y Verify detallado con estados OK/MISMATCH/MISSING.
  - **Formatos:** CSV/JSON integrables, m√°s resumen TXT legible para tu dashboard o env√≠o r√°pido.
  - **Trazabilidad:** guarda el log crudo de Robocopy y todo se referencia en el resumen.

- **Seguridad:**
  - **Exclusiones:** evita temporales/locks; reduce inconsistencias.
  - **DryRun:** modo obligatorio recomendado antes de ejecuci√≥n real en entornos cr√≠ticos.
  - **Permisos:** crea destino de forma segura; no borra fuera de su √°mbito.

- **Casos l√≠mite contemplados:**
  - **Sin UI disponible:** contin√∫a con la versi√≥n m√°s reciente y lo registra.
  - **Subcarpeta inexistente:** avisa y contin√∫a con el resto (WARN + auditor√≠a).
  - **Verificaci√≥n parcial:** checksum aplica solo a lo elegido; archivos faltantes se registran como MISSING.

- **Rendimiento:**
  - **Concurrencia /MT:** configurable para acelerar; reintentos moderados /R y /W.
  - **E/S minimizada:** /NP,/NFL,/NDL mantienen logs concisos mientras el raw log conserva detalles.

---

## Extensiones recomendadas

- **Mejoras opcionales:**
  - **Selector por cat√°logo:** mostrar `catalog.csv` para elegir archivos concretos con Out-GridView.
  - **Cuarentena de mismatches:** mover archivos con MISMATCH a una subcarpeta para revisi√≥n.
  - **Notificaciones:** enviar resumen (TXT/CSV) a correo/Teams integrado con tu gestor.
  - **Pre-restore diff:** inventario del destino antes y despu√©s, con diff para auditor√≠a.
  - **Preset de perfiles:** JSON de mapeos ‚ÄúPerfilUsuario‚Äù, ‚ÄúIISApp‚Äù, ‚ÄúServicioX‚Äù con subpaths t√≠picos y exclusiones.

- **Siguiente paso (propuesta concreta):**
  - A√±adir `-CatalogDriven` para restaurar por lista desde `catalog.csv`, con barra de progreso y reintentos autom√°ticos en mismatches.  
  - Integrar un `-ConfigPath` con presets de restauraci√≥n por rol y un ‚Äúwizard‚Äù de 3 pasos en tu UI: versi√≥n ‚Üí componentes ‚Üí confirmaci√≥n (DryRun primero). 

15. **Gesti√≥n de procesos:** Terminar procesos colgados con lista blanca y raz√≥n de cierre.
## Resumen del m√≥dulo

- **Prop√≥sito:** Identificar y terminar procesos colgados de forma segura, respetando una lista blanca y registrando la raz√≥n de cierre. Incluye UI simple para confirmaci√≥n, simulaci√≥n (DryRun), auditor√≠a CSV/JSON y log de ejecuci√≥n.
- **Alcance:**
  - **Entradas:** criterios de ‚Äúcolgado‚Äù (no responde, sin CPU, runtime excesivo), lista blanca por nombre/ruta/usuario, selecci√≥n manual opcional, modo DryRun, cierre forzado y cierre de hijos.
  - **Salidas:** procesos finalizados con raz√≥n y detalles (PID, nombre, usuario, ruta), auditor√≠a CSV/JSON, log y resumen final.
  - **Validaciones:** existencia del proceso al actuar, respeto a lista blanca, exclusi√≥n de procesos cr√≠ticos del sistema, idempotencia (no intentar finalizar procesos ya muertos).

## Explicaci√≥n de uso

### Par√°metros

- **SampleIntervalSeconds:** Segundo muestreo para calcular delta de CPU. Si el delta ~0 ms, se considera ZeroCPU.
- **MaxRuntimeMinutes:** Umbral de runtime excesivo (ExceededRuntime).
- **OnlyNotResponding:** Limita candidatos a procesos con ventana principal y que no responden.
- **IncludeServices:** Permite incluir procesos sin UI/sesi√≥n 0 (servicios/sistema). Desactivado por seguridad.
- **WhitelistNames / WhitelistPaths / WhitelistUsers:** Lista blanca por nombre, ruta completa y usuario. Incluye cr√≠ticos extras por defecto.
- **ExtraCriticalNames:** Nombres de procesos del sistema que nunca se deben terminar.
- **DryRun:** Simula terminaciones para validar criterios y UI.
- **ForceKill:** Usa Stop-Process -Force. Activo por defecto; puedes desactivarlo.
- **KillChildren:** Intenta terminar procesos hijos del candidato.
- **ExecutionLogPath / AuditCsvPath / AuditJsonPath / SummaryReportPath:** Salidas de log/auditor√≠a con defaults en %TEMP%\ProcessManager.

### Ejecuci√≥n directa

- **Simulaci√≥n segura (UI simple):**
  ```
  .\Manage-Processes.ps1 -DryRun -OnlyNotResponding
  ```
- **Detecci√≥n por ZeroCPU y runtime, respetando lista blanca:**
  ```
  .\Manage-Processes.ps1 -SampleIntervalSeconds 5 -MaxRuntimeMinutes 180 -WhitelistNames "explorer","powershell","svchost" -KillChildren
  ```
- **Incluir servicios (cautela) y desactivar Force:**
  ```
  .\Manage-Processes.ps1 -IncludeServices -ForceKill:$false -MaxRuntimeMinutes 60
  ```

### Integraci√≥n en tu Gestor de Scripts Universal (UI simple)

- **UI m√≠nima:**
  - **Toggles:** DryRun, OnlyNotResponding, IncludeServices, KillChildren, ForceKill.
  - **Campos:** SampleIntervalSeconds, MaxRuntimeMinutes.
  - **Listas:** WhitelistNames/Paths/Users (multi-l√≠nea).
  - **Estado:** tail del ExecutionLogPath y contador por acci√≥n del resumen.
- **Flujo:**
  1. Ejecuta muestreo y muestra candidatos en Out-GridView para selecci√≥n.
  2. Si no hay Out-GridView, pide √≠ndices en consola.
  3. Aplica terminaci√≥n y registra auditor√≠a.
- **Backend (ejemplo):**
  ```
  $args = @{
    SampleIntervalSeconds = 5
    MaxRuntimeMinutes = 120
    WhitelistNames = @("explorer","svchost","powershell")
    DryRun = $false
    OnlyNotResponding = $true
  }

  Start-Process powershell -ArgumentList @(
    "-NoProfile","-ExecutionPolicy","Bypass","-File","Manage-Processes.ps1",
    "-SampleIntervalSeconds",$args.SampleIntervalSeconds,
    "-MaxRuntimeMinutes",$args.MaxRuntimeMinutes,
    "-WhitelistNames",($args.WhitelistNames -join ","),
    $args.DryRun ? "-DryRun" : "",
    $args.OnlyNotResponding ? "-OnlyNotResponding" : ""
  ) -Wait
  ```

---

## Pensamiento profundo aplicado

- **Robustez:**
  - **M√©tricas dobles:** muestreo de CPU en dos puntos evita falsos positivos por instant√°neas.
  - **NotResponding real:** usa MainWindowHandle y Responding para GUI; filtrado opcional de servicios.
  - **Runtime controlado:** protege contra procesos fugitivos de larga ejecuci√≥n.
  - **Idempotencia:** verifica existencia antes de terminar; los ya finalizados no se reintentan.

- **Auditor√≠a:**
  - **Raz√≥n expl√≠cita:** Reason agrega ‚ÄúNotResponding‚Äù, ‚ÄúZeroCPU‚Äù y/o ‚ÄúExceededRuntime‚Äù.
  - **Eventos:** Skip-Whitelist, Already-Exited, Terminate, Process-Error; estados OK/ERROR/DRYRUN.
  - **Formatos:** CSV/JSON listos para paneles; resumen TXT con conteos.

- **Seguridad:**
  - **Lista blanca y cr√≠ticos:** evita terminar procesos del sistema y los definidos por el usuario.
  - **Servicios excluidos por defecto:** reduce riesgos; activaci√≥n expl√≠cita requerida.
  - **DryRun y confirmaci√≥n:** UI simple obliga selecci√≥n consciente antes de actuar.

- **Casos l√≠mite:**
  - **Acceso denegado a MainModule/Owner:** manejado con try/catch; ruta/usuario pueden ser null, se sigue con criterios disponibles.
  - **Procesos ef√≠meros:** pueden desaparecer entre muestras; se registra Already-Exited.
  - **Sesi√≥n 0/servicios:** filtrados a menos que IncludeServices est√© activo.

- **Escalabilidad:**
  - **Ligero y portable:** solo cmdlets est√°ndar y CIM; Out-GridView opcional.
  - **Presets por rol:** listas blancas y umbrales ajustables por entorno (DEV/QA/PROD), integrables en tu Gestor.

---

## Extensiones recomendadas

- **Mejoras opcionales:**
  - **-ConfigPath (JSON):** cargar umbrales y listas blancas por rol; ejecutar en lote con reportes consolidados.
  - **Modo ‚Äúquarantine‚Äù:** en vez de terminar, reducir prioridad/affinity y registrar seguimiento antes de matar.
  - **Notificaciones:** enviar resumen a correo/Teams si hubo terminaciones o errores.
  - **Kill pattern seguro:** terminar por patr√≥n de ruta/nombre con confirmaci√≥n.
  - **Registro de √°rbol:** inventario de procesos hijos antes/despu√©s, para auditor√≠a profunda.

- **Siguiente paso:**
  - A√±adir `-ConfigPath` y presets por rol, m√°s un ‚Äúwizard‚Äù simple en tu UI: muestreo ‚Üí selecci√≥n ‚Üí confirmaci√≥n (DryRun recomendado) ‚Üí ejecuci√≥n con reporte consolidado. ¬øLo integramos en tu Gestor con perfiles DEV/QA/PROD?

16. **Monitor de rendimiento:** Capturar m√©tricas (CPU, RAM, disco, red) y alertar umbrales.
  ## Resumen del m√≥dulo

- **Prop√≥sito:** Monitorear en tiempo real rendimiento de CPU, RAM, disco y red, con alertas por umbrales, registro continuo en consola, logs en archivo, y auditor√≠a en CSV/JSON. La ventana permanece abierta y muestra progreso en vivo.
- **Alcance:**
  - **Entradas:** intervalo de muestreo, duraci√≥n o cantidad de muestras, umbrales por m√©trica, selecci√≥n de adaptadores/red y discos, n√∫mero de consecutivos para alertar, modo consola y persistencia de ventana.
  - **Salidas:** log de ejecuci√≥n, auditor√≠a de muestras (CSV/JSON), resumen final (TXT), alertas en consola con detalle de m√©tricas fuera de umbral.
  - **Validaciones:** existencia de contadores, manejo de adaptadores/discos inexistentes, robustez ante errores transitorios de Get-Counter, idempotencia (solo lectura).

## Explicaci√≥n de uso

### Par√°metros

- **IntervalSeconds / Samples / DurationMinutes:** Controlan el ritmo y la duraci√≥n del monitoreo. Si `Samples=0`, se usa `DurationMinutes`.
- **CpuHighPercent / RamHighPercent / DiskBusyHighPercent / DiskQueueHigh / NetHighMbps:** Umbrales de alerta para cada m√©trica.
- **AlertOnConsecutive:** Requiere N muestras consecutivas fuera de umbral antes de alertar (reduce ruido).
- **IncludeAdapters / ExcludeAdapters:** Selecci√≥n de adaptadores de red. Por defecto se excluyen pseudo-interfaces.
- **IncludeDisks:** Instancias espec√≠ficas de PhysicalDisk (ej.: "0 C:", "1 D:"). Si se omite, usa `_Total`.
- **ExecutionLogPath / AuditCsvPath / AuditJsonPath / SummaryReportPath:** Salidas; por defecto en `%TEMP%\PerfMonitor`.
- **KeepWindowOpen:** Mantiene la ventana abierta al finalizar (mensaje ‚ÄúPresiona Enter‚Ä¶‚Äù).
- **VerboseConsole:** Muestra todo en consola en tiempo real (por defecto activo).

### Ejecuci√≥n directa

- **Monitoreo b√°sico 5 min, consola en vivo, ventana abierta al final:**
  ```
  .\Monitor-Performance.ps1 -DurationMinutes 5 -IntervalSeconds 3 -KeepWindowOpen
  ```
- **Umbrales estrictos y adaptadores espec√≠ficos:**
  ```
  .\Monitor-Performance.ps1 -DurationMinutes 10 -CpuHighPercent 90 -RamHighPercent 90 -NetHighMbps 200 `
    -IncludeAdapters "Ethernet","Wi-Fi" -AlertOnConsecutive 2 -KeepWindowOpen
  ```
- **Discos espec√≠ficos y reporte detallado:**
  ```
  .\Monitor-Performance.ps1 -Samples 100 -IntervalSeconds 2 -IncludeDisks "0 C:","1 D:" -DiskBusyHighPercent 85 -DiskQueueHigh 1.5 -KeepWindowOpen
  ```

### Integraci√≥n en tu Gestor de Scripts Universal (UI simple)

- **Controles:**
  - **Campos:** IntervalSeconds, Samples o DurationMinutes.
  - **Umbrales:** Cpu/Ram/Disk/Queue/Net (inputs num√©ricos).
  - **Listas:** IncludeAdapters, IncludeDisks (multi-l√≠nea).
  - **Toggles:** VerboseConsole, KeepWindowOpen.
- **Visualizaci√≥n:**
  - **Log en vivo:** tail del `ExecutionLogPath`.
  - **Alertas:** resaltar l√≠neas que contienen ‚ÄúALERTA:‚Äù y mostrar contador de consecutivos.
  - **Salidas:** enlaces a Audit CSV/JSON y Summary TXT.
- **Llamada desde backend (ejemplo):**
  ```
  $args = @{
    IntervalSeconds = 3
    DurationMinutes = 5
    CpuHighPercent = 85
    RamHighPercent = 85
    NetHighMbps = 100
    KeepWindowOpen = $true
  }

  Start-Process powershell -ArgumentList @(
    "-NoProfile","-ExecutionPolicy","Bypass","-File","Monitor-Performance.ps1",
    "-IntervalSeconds",$args.IntervalSeconds,
    "-DurationMinutes",$args.DurationMinutes,
    "-CpuHighPercent",$args.CpuHighPercent,
    "-RamHighPercent",$args.RamHighPercent,
    "-NetHighMbps",$args.NetHighMbps,
    $args.KeepWindowOpen ? "-KeepWindowOpen" : ""
  )
  ```

---

## Pensamiento profundo aplicado

- **Robustez:**
  - Maneja errores de `Get-Counter` y contadores no disponibles sin detener la ejecuci√≥n.
  - Usa consecutivos para evitar alertas espurias; configurable por par√°metro.
  - Calcula RAM% con TotalPhysicalMemory real, evitando suposiciones.
  - Permite m√©tricas por instancia de disco y por adaptador de red, manteniendo `_Total` como fallback.

- **Auditor√≠a:**
  - Muestra cada muestra en consola y la guarda en CSV/JSON con timestamp y alertas activas.
  - Log de ejecuci√≥n con colores en tiempo real, f√°cil de tail en tu UI.
  - Resumen final con m√°ximos observados por m√©trica.

- **Escalabilidad:**
  - Parametrizable por perfiles (DEV/QA/PROD) con presets de umbrales y adaptadores.
  - Ligero: solo `Get-Counter` y CIM, sin dependencias externas.
  - Integrable en dashboard con streaming del log y gr√°ficos en tu plataforma (si luego lo deseas).

- **Seguridad:**
  - Solo lectura de contadores y WMI; sin cambios en el sistema.
  - Excluye pseudo-interfaces para reducir ruido (personalizable).

- **Casos l√≠mite:**
  - Sin adaptadores v√°lidos: registra ‚Äún/a‚Äù y contin√∫a.
  - Contadores ausentes o sin permisos: captura excepci√≥n y muestra ‚Äún/a‚Äù.
  - Duraci√≥n vs muestras: calcula `Samples` autom√°ticamente cuando se usa `DurationMinutes`.

---

## Extensiones recomendadas

- **Mejoras opcionales:**
  - Notificaciones: enviar alerta v√≠a correo/Teams cuando se superen umbrales X consecutivos.
  - Persistencia circular: escribir CSV con rotaci√≥n por tama√±o/tiempo (para monitoreos largos).
  - Exportar a Prometheus/Influx: endpoint o archivo en formato de m√©tricas.
  - Perfil de carga: medir tambi√©n `\Processor Information(_Total)\Processor Frequency` y latencia de disco.
  - Modo continuo: `-Continuous` con tecla para detener y rotaci√≥n de logs por hora.

- **Siguiente paso:**
  - A√±adir `-ConfigPath` para presets de umbrales y selecci√≥n de adaptadores/discos por rol.
  - Integrar alertas en tu Gestor: badge rojo/amarillo con contador de consecutivos, y bot√≥n ‚ÄúVer detalle‚Äù que abre el `ExecutionLogPath`.
  
17. **Optimizaci√≥n de arranque:** Deshabilitar startups no cr√≠ticos por impacto medido.
## Resumen del m√≥dulo

- **Prop√≥sito:** Detectar y medir el impacto de programas de inicio (startup) y deshabilitar, de forma segura e interactiva, los no cr√≠ticos. Mide impacto en tiempo real (CPU/RAM) de los procesos asociados, registra auditor√≠a y deja la ventana abierta mostrando progreso.
- **Alcance:**
  - **Entradas:** umbrales de impacto (CPU %, RAM MB), lista blanca (nombres, rutas), duraci√≥n de muestreo, DryRun, confirmaci√≥n por UI simple, mantener ventana abierta.
  - **Salidas:** consola en vivo con tabla, log de ejecuci√≥n, auditor√≠a CSV/JSON, resumen TXT, respaldo de entradas deshabilitadas para rollback.
  - **Validaciones:** no toca procesos cr√≠ticos del sistema ni entradas en lista blanca, backup seguro antes de deshabilitar, idempotencia (no deshabilita dos veces lo mismo).

## Explicaci√≥n de uso

### Par√°metros

- **CpuThresholdPercent / RamThresholdMB:** Umbrales para considerar una entrada de impacto High o Medium seg√∫n el muestreo en vivo.
- **SampleSeconds:** Duraci√≥n del muestreo para calcular delta de CPU y RAM.
- **WhitelistNames / WhitelistPaths:** Entradas que nunca se deshabilitan (por nombre o ruta).
- **DryRun:** Simula el proceso de deshabilitar; igual genera auditor√≠a y muestra en consola.
- **KeepWindowOpen:** Mantiene la ventana abierta al finalizar con un prompt de Enter.
- **ExecutionLogPath / AuditCsvPath / AuditJsonPath / SummaryReportPath:** Rutas de salida; se crean por defecto en %TEMP%\StartupOptimizer.

### Ejecuci√≥n directa

- **Simulaci√≥n segura con UI simple y ventana abierta:**
  ```
  .\Optimize-Startup.ps1 -SampleSeconds 3 -CpuThresholdPercent 10 -RamThresholdMB 200 -DryRun -KeepWindowOpen
  ```
- **Deshabilitar candidatos con impacto alto/medio respetando lista blanca:**
  ```
  .\Optimize-Startup.ps1 -CpuThresholdPercent 15 -RamThresholdMB 250 -KeepWindowOpen
  ```
- **Lista blanca por ruta y umbrales m√°s estrictos:**
  ```
  .\Optimize-Startup.ps1 -WhitelistPaths "C:\Program Files\Vendor\App\app.exe","C:\Tools\*" -CpuThresholdPercent 20 -RamThresholdMB 300 -KeepWindowOpen
  ```

### Integraci√≥n en tu Gestor de Scripts Universal (UI simple)

- **Controles:**
  - **Inputs num√©ricos:** CpuThresholdPercent, RamThresholdMB, SampleSeconds.
  - **Listas:** WhitelistNames, WhitelistPaths (multi-l√≠nea).
  - **Toggles:** DryRun, KeepWindowOpen.
- **Visualizaci√≥n:**
  - **Log en vivo:** tail de ExecutionLogPath (muestra tabla y acciones).
  - **Acci√≥n:** al presionar ‚ÄúAnalizar‚Äù, se listan entradas y, si procede, se abre selecci√≥n (Out-GridView). Fallback consola si no est√° disponible.
  - **Salidas:** enlaces a Audit CSV/JSON y Summary TXT.

- **Llamada backend (ejemplo):**
  ```
  $args = @{
    CpuThresholdPercent = 15
    RamThresholdMB = 250
    SampleSeconds = 3
    KeepWindowOpen = $true
  }
  Start-Process powershell -ArgumentList @(
    "-NoProfile","-ExecutionPolicy","Bypass","-File","Optimize-Startup.ps1",
    "-CpuThresholdPercent",$args.CpuThresholdPercent,
    "-RamThresholdMB",$args.RamThresholdMB,
    "-SampleSeconds",$args.SampleSeconds,
    $args.KeepWindowOpen ? "-KeepWindowOpen" : ""
  ) -Wait
  ```

---

## Pensamiento profundo aplicado

- **Robustez:**
  - Muestreo de CPU con delta de tiempo real para evitar lecturas instant√°neas enga√±osas; RAM tomada del WorkingSet actual.
  - Idempotencia al deshabilitar: evita duplicados; para Registro, respalda en RunDisabled; para carpeta, mueve a ‚ÄúDisabled‚Äù.
  - Lista blanca por nombre y ruta, m√°s entradas cr√≠ticas comunes (ajustables).

- **Auditor√≠a y trazabilidad:**
  - Cada deshabilitado registra Source y Target (clave de backup o ruta movida), con raz√≥n basada en m√©tricas.
  - Logs detallados en consola y archivo; resumen con conteos por acci√≥n.
  - DryRun conserva igual auditor√≠a, √∫til para revisi√≥n previa.

- **Seguridad:**
  - Rollback simple incorporado: Restore manual desde RunDisabled y carpeta Disabled.
  - Nunca borra ejecutables ni valores sin antes crear backup; usa Remove-ItemProperty solo tras copiar al √°rea de backup.
  - Respeta lista blanca y evita tocar procesos del sistema t√≠picos.

- **Casos l√≠mite:**
  - Rutas con comillas/espacios: parser tolerante para extraer ejecutable.
  - Acceso denegado a MainModule: fallback a b√∫squeda por nombre y captura de errores sin detener.
  - Entradas ya deshabilitadas: se detecta y registra como NotFound/Idempotente.

- **Escalabilidad:**
  - Parametrizable por rol (perfiles) con listas blancas distintas.
  - Integrable en dashboards con el log en tiempo real y auditor√≠as para comparativos entre ejecuciones.

---

## Extensiones recomendadas

- **Mejoras opcionales:**
  - Par√°metro `-Rollback` para reactivar entradas desde RunDisabled o mover de ‚ÄúDisabled‚Äù a su ubicaci√≥n original.
  - `-ConfigPath` (JSON) con pol√≠ticas por entorno: umbrales, listas blancas y rutas cr√≠ticas por rol.
  - Reporte comparativo: snapshot de startups antes/despu√©s y diff en CSV.
  - Heur√≠stica de impacto extendida: medir tiempo de arranque hist√≥rico con eventos de `Diagnostics-Performance` (EventLog).
  - Notificaciones: enviar resumen por correo/Teams cuando se deshabiliten N entradas o haya errores.

- **Siguiente paso concreto:**
  - A√±adir `-Rollback` y `-ConfigPath` para gesti√≥n bidireccional (deshabilitar/rehabilitar) con presets por rol, y exponer en tu Gestor un flujo: Analizar ‚Üí Seleccionar ‚Üí Confirmar ‚Üí Ejecutar ‚Üí Resumen/Undo. ¬øQuieres que lo implemente en la pr√≥xima iteraci√≥n?

18. **Gesti√≥n de tareas programadas:** Crear, exportar y validar tareas con triggers complejos.  
19. **Configuraci√≥n de proxy:** Definir proxy del sistema y excepciones por dominio.  
20. **Descarga automatizada:** Fetch de archivos con reintentos, hashes y reanudaci√≥n.  
21. **Comparaci√≥n de archivos:** Detectar duplicados por hash y generar informe.  
22. **Ordenar biblioteca:** Renombrar y clasificar documentos/media seg√∫n metadatos.  
23. **Extracci√≥n de metadatos:** Leer EXIF/PDF/DOCX y exportar a base de datos.  
24. **Compresi√≥n inteligente:** Zip por lote con reglas de exclusi√≥n y estructura.  
25. **Descompresi√≥n masiva:** Extraer m√∫ltiples archivos preservando jerarqu√≠as.  
26. **Plantillas de proyectos:** Generar estructura est√°ndar con README y scripts base.  
27. **Gesti√≥n de hosts:** A√±adir/quitar entradas en hosts con registro de cambios.  
28. **DNS flush y pruebas:** Limpiar cach√© y validar resoluci√≥n para dominios clave.  
29. **Ping y conectividad:** Comprobar latencia, p√©rdida y trazar rutas con reporte.  
30. **Pruebas de puertos:** Escanear puertos locales/remotos y validar servicios activos.  
31. **Configuraci√≥n de NTP:** Sincronizar hora y verificar drift y √∫ltima fuente.  
32. **Instalar fuentes:** Copiar y registrar tipograf√≠as con verificaci√≥n en el sistema.  
33. **Gesti√≥n de impresoras:** Agregar colas, drivers y establecer impresora predeterminada.  
34. **Pol√≠tica de energ√≠a:** Ajustar planes y desactivar suspensi√≥n para tareas cr√≠ticas.  
35. **Gesti√≥n de certificados:** Importar/exportar, renovar y validar cadenas de confianza.  
36. **Firma de scripts:** Firmar .ps1 y aplicar ExecutionPolicy seguro por √°mbito.  
37. **Control de ExecutionPolicy:** Establecer por usuario/m√°quina y auditar excepciones.  
38. **UI de instalaci√≥n:** WinForms/WPF para instaladores con progreso y logs.  
39. **Selector de iconos:** Asignar iconos din√°micos a accesos directos seg√∫n estado.  
40. **Men√∫ de acciones r√°pidas:** Lanzador universal para tareas y scripts paralelos.  
41. **Colas y paralelismo:** Ejecutar jobs en paralelo con l√≠mites y cancelaci√≥n segura.  
42. **Gesti√≥n de credenciales:** Guardar en CredentialManager o DPAPI con rotaci√≥n.  
43. **Encriptaci√≥n de archivos:** Proteger datos sensibles con AES y claves por entorno.  
44. **Scraping liviano:** Extraer datos de p√°ginas y generar reportes CSV.  
45. **Notificaciones toast:** Alertas visuales con √≠conos y niveles de severidad.  
46. **Email automatizado:** Enviar informes con adjuntos, plantillas y DKIM opcional.  
47. **Webhook dispatcher:** Publicar eventos a endpoints (Slack, Teams, Discord).  
48. **REST API client:** CRUD contra APIs con autenticaci√≥n y manejo de errores.  
49. **Generaci√≥n de documentaci√≥n:** Crear Markdown/HTML desde metadatos de scripts.  
50. **Changelog autom√°tico:** Construir notas de versi√≥n desde commits o diffs.  
51. **Gesti√≥n de perfiles PowerShell:** Inicializar m√≥dulos, aliases y temas por rol.  
52. **Instalaci√≥n de m√≥dulos:** Resolver dependencias con PSGallery y fuentes privadas.  
53. **Pruebas Pester:** Ejecutar tests unitarios y publicar resultados.  
54. **Linting de c√≥digo:** Validar estilo y seguridad con reglas personalizadas.  
55. **Plantillas de UI:** Aplicar paletas, tipograf√≠as e √≠conos coherentes a WinForms.  
56. **Tema claro/oscuro:** Toggle de tema con persistencia y contraste accesible.  
57. **Logs estructurados:** Salida JSON con correlaci√≥n de operaci√≥n e ID de sesi√≥n.  
58. **Gesti√≥n de errores:** Try/catch centralizado con reintentos y circuit breaker.  
59. **Feature flags:** Activar funciones por entorno o usuario con toggles persistentes.  
60. **Perfilado de rendimiento:** Medir tiempo por bloque y generar flame-like report.  
61. **C√°lculo de hashes:** MD5/SHA256 para verificaci√≥n de integridad en lote.  
62. **Control de versiones de archivos:** Guardar snapshots y diffs con metadatos.  
63. **Renombrado masivo:** Reglas por patr√≥n, numeraci√≥n y normalizaci√≥n de caracteres.  
64. **Conversi√≥n de formatos:** CSV‚ÜîJSON‚ÜîXML con validaci√≥n de esquema.  
65. **Parsing de logs:** Extraer eventos clave y agregaciones con expresiones regulares.  
66. **Auditor√≠a de permisos:** Listar ACL y detectar herencias peligrosas.  
67. **Correcci√≥n de ACL:** Aplicar plantillas de permisos por carpeta/proyecto.  
68. **Bloqueo de dispositivos USB:** Pol√≠ticas de acceso por ID y excepciones.  
69. **Monitoreo de eventos:** Suscripci√≥n a EventLog y alertas en tiempo real.  
70. **Health check de apps:** Validar procesos, puertos y archivos de configuraci√≥n.  
71. **Instalador portable:** Empaquetar binarios con rutas relativas e iconos.  
72. **Desinstalaci√≥n limpia:** Remover apps y residuos (carpetas, servicios, tareas).  
73. **Provisioning de m√°quina nueva:** Secuencia completa de drivers, apps y ajustes.  
74. **Reset de red:** Renovar IP, limpiar stack y reconfigurar adaptadores.  
75. **Pol√≠tica de actualizaciones:** Pausar, programar y forzar Windows Update con reportes.  
76. **Telemetr√≠a local:** Recoger m√©tricas de uso y enviar a un endpoint interno.  
77. **Gesti√≥n de sesiones RDP:** Habilitar, auditar y cerrar sesiones inactivas.  
78. **Control de puertos USB serie:** Detectar y mapear COM para dispositivos espec√≠ficos.  
79. **Gesti√≥n de SQLite:** CRUD local para cat√°logos y configuraciones portables.  
80. **Plantillas de accesos directos:** Crear LNK/URL con iconos, argumentos y scope.  
81. **Validador de enlaces:** Comprobar disponibilidad de URLs y reportar rotos.  
82. **Generaci√≥n de QR:** Crear c√≥digos para enlaces, Wi-Fi o configuraci√≥n r√°pida.  
83. **Cat√°logo de iconos:** Previsualizar packs y asignar por categor√≠a o estado.  
84. **Buscador universal:** Indexar rutas y ejecutar acciones con fuzzy search.  
85. **Gesti√≥n de perfiles de Git:** Config global/local, SSH y firma de commits.  
86. **Build pipeline local:** Compilar, testear y empaquetar proyectos con pasos orquestados.  
87. **Distribuci√≥n por lotes:** Copiar apps a m√∫ltiples m√°quinas con validaci√≥n remota.  
88. **Remoting seguro:** Ejecutar tareas en equipos remotos con credenciales rotadas.  
89. **Generaci√≥n de reportes ejecutivos:** Res√∫menes gr√°ficos (HTML) de estado y progreso.  
90. **Control de calidad de datos:** Validar esquemas y reglas antes de importar/exportar.  
91. **Normalizaci√≥n de nombres:** Quitar acentos, espacios y s√≠mbolos para compatibilidad.  
92. **Gesti√≥n de cach√© de build:** Reusar artefactos si hashes coinciden.  
93. **Simulaci√≥n de fallos:** Probar resiliencia de scripts bajo errores controlados.  
94. **Auto-actualizaci√≥n de scripts:** Chequear releases y actualizar .ps1 con firma.  
95. **M√≥dulo de utilidades comunes:** Librer√≠a compartida para logs, errores y UI.  
96. **Wizard de configuraci√≥n:** Paso a paso con validaciones y previsualizaci√≥n.  
97. **Control de versiones sem√°nticas:** Incremento autom√°tico de MAJOR/MINOR/PATCH.  
98. **Plantillas de documentaci√≥n UI:** Capturas, paletas y justificaci√≥n de dise√±o.  
99. **Orquestaci√≥n paralela segura:** Jobs con aislamiento, timeouts y reintentos por tarea.  
100. **Distribuci√≥n con branding:** Generar instaladores y lanzadores con identidad visual consistente.

# Gestor de Scripts Universal

Actualmente este repositorio contiene **17 herramientas funcionales** en formato `.ps1`, ya organizadas por categor√≠as (instalaci√≥n, seguridad, red, backup, UI, etc.).

üöß **Estado del proyecto:**  
A√∫n faltan **83 herramientas adicionales** que se encuentran en desarrollo. Todas ellas tambi√©n estar√°n implementadas como scripts `.ps1`, siguiendo la misma estructura modular y escalable.

üîì **Licencia y filosof√≠a:**  
Este software ser√° de **c√≥digo libre**, con el objetivo de que cualquier persona pueda revisarlo, adaptarlo y mejorarlo. La idea es construir un ecosistema abierto, auditable y en constante evoluci√≥n.

---